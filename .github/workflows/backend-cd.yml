name: CD - Build Backend

on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - backend/**
      - .github/workflows/**

permissions: write-all

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_PASSWORD: "#FuckYourMum2020"
          POSTGRES_USER: richard
          POSTGRES_DB: korfball
        ports:
          - 5200:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    defaults:
      run:
        working-directory: backend

    steps:

      - name: slack webhook call
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PLAYERAPI }}
        run: |
          curl -X POST -H 'Content-type: application/json' --data '{"text":"Continuous Deployment!"}' $SLACK_WEBHOOK
          

      - uses: actions/checkout@v3

      - uses: actions/setup-java@v3
        with:
          java-version: 17
          cache: 'maven'
          distribution: temurin

      - name: Log into DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_ACCESS_TOKEN }}

      - name: Generate Random Build Number
        id: build-number
        run: echo "BUILD_NUMBER=$(date '+%d.%m.%Y.%H.%M.%S')" >> $GITHUB_OUTPUT

      - name: Wait for Postgres to be Ready
        run: |
          for i in {1..10}; do
            if pg_isready -h localhost -p 5200; then
              echo "Postgres is ready";
              exit 0;
            fi;
            echo "Waiting for Postgres...";
            sleep 5;
          done;
          echo "Postgres did not become ready in time";
          exit 1;

      - name: Build Package with Maven
        run: mvn -ntp -B verify  -DskipTests  -Ddocker.image.tag=${{steps.build-number.outputs.BUILD_NUMBER}} jib:build

      - name: Update Dockerrun.aws.json with New Tag
        run: |
          echo "Before updating tag"
          cat Dockerrun.aws.json
          sed -i -E 's_(rsmithuchot1/player-api:)([^"]*)_\1'${{steps.build-number.outputs.BUILD_NUMBER}}'_' Dockerrun.aws.json
          echo "After updating tag"
          cat Dockerrun.aws.json

      - name: Deploy to Elastic Beanstalk
        uses: einaregilsson/beanstalk-deploy@v22
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: ${{ secrets.EB_APPLICATION_NAME }}
          environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
          version_label: ${{ steps.build-number.outputs.BUILD_NUMBER }}
          version_description: ${{ github.SHA }}
          region: ${{ secrets.EB_REGION }}
          deployment_package: backend/Dockerrun.aws.json

      - name: Commit and push Dockerrun.aws.json
        run: |
          git config user.name github-actions
          git config user.email github-actions@github.com
          git add .
          git commit -m "Update Dockerrun.aws.json docker image with new tag ${{ steps.build-number.outputs.BUILD_NUMBER }}"
          git push